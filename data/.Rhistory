abline(v=mean(mtcars[ mtcars$am == "Manual",]$mpg))
abline(v=mean(mtcars[ mtcars$am == "Manual",]$mpg), col="red")
par(mfrow=c(1,2))
hist(mtcars[ mtcars$am == "Manual",]$mpg, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(mtcars[ mtcars$am == "Manual",]$mpg), col="red")
hist(mtcars[ mtcars$am == "Automatic",]$mpg, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
abline(v=mean(mtcars[ mtcars$am == "Automatic",]$mpg), col="red")
par(mfrow=c(1,2))
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
Ynormal <- dnorm(Xnormal, mean=mean(MpgManual) , sd=sd(mean(MpgManual)))
Ynormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(mean(MpgManual)))
Ynormal <- Ynormal * diff(HistManual$mids[1:2]) *
length(MpgManual)
lines(Xnormal,Ynormal, col ="red")
lines(XNormal,Ynormal, col ="red")
par(mfrow=c(1,2))
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(mean(MpgManual)))
YNormal <- YNormal * diff(HistManual$mids[1:2]) *
length(MpgManual)
lines(XNormal,YNormal, col ="red")
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
HistManual
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(mean(MpgManual)))
YNormal <- YNormal * diff(HistManual$mids[1:2]) *
length(MpgManual)
lines(XNormal,YNormal, col ="red")
XNormal
YNormal
YNormal <- YNormal * diff(HistManual$mids[1:2]) * length(MpgManual)
lines(XNormal,YNormal, col ="red")
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(MpgManual))
YNormal
YNormal <- YNormal * diff(HistManual$mids[1:2]) * length(MpgManual)
lines(XNormal,YNormal, col ="red")
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
HistManual
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(MpgManual))
YNormal <- YNormal * diff(HistManual$mids[1:2]) * length(MpgManual)
lines(XNormal,YNormal, col ="blue")
MpgManual <-mtcars[ mtcars$am == "Automatic",]$mpg
MpgAutomaticl <-mtcars[ mtcars$am == "Automatic",]$mpg
HistAutomatic<-hist(MpgAutomatic, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
MpgAutomatic<-mtcars[ mtcars$am == "Automatic",]$mpg
HistAutomatic<-hist(MpgAutomatic, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
abline(v=mean(MpgAutomatic), col="red")
MpgAutomatic<-mtcars[ mtcars$am == "Automatic",]$mpg
HistAutomatic<-hist(MpgAutomatic, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
abline(v=mean(MpgAutomatic), col="red")
XNormal <-seq(min(MpgAutomatic),max(MpgAutomatic), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgAutomatic) , sd=sd(MpgAutomatic))
YNormal <- YNormal * diff(HistAutomatic$mids[1:2]) * length(MpgAutomatic)
lines(XNormal,YNormal, col ="blue")
par(mfrow=c(1,2))
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(MpgManual))
YNormal <- YNormal * diff(HistManual$mids[1:2]) * length(MpgManual)
lines(XNormal,YNormal, col ="blue")
MpgAutomatic<-mtcars[ mtcars$am == "Automatic",]$mpg
HistAutomatic<-hist(MpgAutomatic, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
abline(v=mean(MpgAutomatic), col="red")
XNormal <-seq(min(MpgAutomatic),max(MpgAutomatic), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgAutomatic) , sd=sd(MpgAutomatic))
YNormal <- YNormal * diff(HistAutomatic$mids[1:2]) * length(MpgAutomatic)
lines(XNormal,YNormal, col ="blue")
mtcars$am <- factor(x=mtcars$am, labels=c("Automatic", "Manual"))
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
MpgAutomatic<-mtcars[ mtcars$am == "Automatic",]$mpg
par(mfrow=c(1,2))
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(MpgManual))
YNormal <- YNormal * diff(HistManual$mids[1:2]) * length(MpgManual)
lines(XNormal,YNormal, col ="blue")
HistAutomatic<-hist(MpgAutomatic, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
abline(v=mean(MpgAutomatic), col="red")
XNormal <-seq(min(MpgAutomatic),max(MpgAutomatic), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgAutomatic) , sd=sd(MpgAutomatic))
YNormal <- YNormal * diff(HistAutomatic$mids[1:2]) * length(MpgAutomatic)
lines(XNormal,YNormal, col ="blue")
#  T-test
ResultsTest <-t.test(mtcars[mtcars$am == "Manual",]$mpg,mtcars[mtcars$am == "Automatic",]$mpg)
names(mtcars)
help(mtcars)
mtcars$vs
mtcars$qsec
hits(qsec)
hits(mtcars$qsec)
hist(mtcars$qsec)
cor(mtcars)
cor(mtcars)
data(mtcars)
CorelationMatrix<-cor(mtcars)
CorelationMatrix
nstall.packages(“leaps”)
nstall.packages("leaps")
install.packages("leaps")
?regsubset()
?regsubsets()
library(leaps)
?regsubsets()
data(mtcars)
regsubsets(mpg~., data=mtcars, nbest=15)
regsubsets(mpg~., data=mtcars, nbest=15)
test<-regsubsets(mpg~., data=mtcars, nbest=15)
plot(test,scale="adjr2"))
plot(test,scale="adjr2")
par(mfrow=c(1,1))
plot(test,scale="adjr2")
test<-regsubsets(mpg~., data=mtcars, nbest=8)
plot(test,scale="adjr2")
test<-regsubsets(mpg~., data=mtcars, nbest=3)
plot(test,scale="adjr2")
mtcars$am <- factor(x=mtcars$am, labels=c("Automatic", "Manual"))
?mtcars
FinalModel <-lm(mpg~hp+wt+am, data=mtcars)
summary(FinalModel)
FinalModel
FinalModel$sigma
pvalue(FinalMode)
pvalues(FinalMode)
FinalModel$p-value
FinalModel$p_value
FinalModel$p-value
FinalModel <-lm(mpg~hp+wt+am, data=mtcars)
FinalModel
influence(FinalModel)
hatvalues(FinalModel)
hatvalues(FinalModel)[[1]]
hatvalues(FinalModel)[[1:10]]
hatvalues(FinalModel)[[1]][]
hatvalues(FinalModel)[[1]][1:10]
hatvalues(FinalModel)[[2]]
hatvalues(FinalModel)[[1;nlength(FinalModel)]]
hatvalues(FinalModel)[[1:nlength(FinalModel)]]
hatvalues(FinalModel)[[1:length(FinalModel)]]
hatvalues(FinalModel)[[2]]
lenght(hatvalues(FinalModels))
length(hatvalues(FinalModels))
length(hatvalues(FinalModel))
max(hatvalues(FinalModel))
which(max(hatvalues(FinalModel)))
wich(max(hatvalues(FinalModel)))
?wich()
?witch()
?whitch()
?which()
which(max(hatvalues(FinalModel)))
max(hatvalues(FinalModel))
help(mtcars)
influence(FinalModel)
names(influence(FinalModel))
test<-summary(FinalModel)
test
names(test)
test$coefficients
names(test$coefficients)
str(test$coefficients)
test$coefficients
test$coefficients[[1]]
test$coefficients[[1]][4]
test$coefficients[1][4]
test$coefficients[1,4]
test$coefficients[4,4]
FinalModelParam[8]
FinalModel <-lm(mpg~hp+wt+am, data=mtcars)
FinalModelParam<-summary(FinalModel)
FinalModelParam[8]
FinalModelParam[4,4]
FinalModelParam
FinalModelParam$Coefficients[4,4]
FinalModelParam$Coefficients
FinalModelParam
FinalModelParam$Coefficients
FinalModelParam[4]
FinalModelParam[4,4]
FinalModelParam[4]
FinalModelParam[4]amManual
FinalModelParam[4]$amManual
FinalModelParam[4,1]
FinalModelParam[4]
FinalModelParam$coefficients
FinalModelParam$coefficients[4,4]
CorrelationMatrix
CorelationMatrix
library(leaps)
BestModel<-=regsubsets(mpg~., data=mtcars, nbest=4)
plot(BestModel,scale="adjr2")
BestModel<-regsubsets(mpg~., data=mtcars, nbest=4)
plot(BestModel,scale="adjr2")
maxModel<-lm(mpg~cyl+disp+hp+wt+qsec+amManual, data= mtcars)
maxModel<-lm(mpg~cyl+disp+hp+wt+qsec+am, data= mtcars)
summary(maxModel)
library(leaps)
data(mtcars)
par(mfrow=c(1,2))
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
mtcars$am <- factor(x=mtcars$am, labels=c("Automatic", "Manual"))
MpgManual <-mtcars[ mtcars$am == "Manual",]$mpg
MpgAutomatic<-mtcars[ mtcars$am == "Automatic",]$mpg
```
par(mfrow=c(1,2))
HistManual<-hist(MpgManual, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Manual")
abline(v=mean(MpgManual), col="red")
XNormal <-seq(min(MpgManual),max(MpgManual), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgManual) , sd=sd(MpgManual))
YNormal <- YNormal * diff(HistManual$mids[1:2]) * length(MpgManual)
lines(XNormal,YNormal, col ="blue")
HistAutomatic<-hist(MpgAutomatic, breaks= 10, xlab="Miles per Gallon", main= " Distribution MPG Automatic")
abline(v=mean(MpgAutomatic), col="red")
XNormal <-seq(min(MpgAutomatic),max(MpgAutomatic), length = 200)
YNormal <- dnorm(XNormal, mean=mean(MpgAutomatic) , sd=sd(MpgAutomatic))
YNormal <- YNormal * diff(HistAutomatic$mids[1:2]) * length(MpgAutomatic)
lines(XNormal,YNormal, col ="blue")
PhysicModel <-lm(mpg<-wt+I(qsec*disp), data=mtcars)
names(mtcars)
PhysicModel <-lm(mpg<-wt+I(qsec^2*disp), data=mtcars)
mtcars$qsec
PhysicModel <-lm(mpg<-wt+I(qsec^2*disp), data=mtcars)
str(mtcars)
PhysicModel <-lm(mpg<-wt+qsec+disp), data=mtcars)
PhysicModel <-lm(mpg<-wt+qsec+disp, data=mtcars)
PhysicModel <-lm(mpg~wt++disp, data=mtcars)
PhysicModel <-lm(mpg~wt+I(qsec^2*disp), data=mtcars)
summary(PhysicModel)
PhysicModel <-lm(mpg~wt+I(qsec^2*disp), data=mtcars)
help(rpg)
plot(PhysicModel)
influence(PhysicModel)
InfPhysic<-influence(PhysicModel)
infPhysic
InfPhysic
InfPhysic$coefficients
str(InfPhysic$coefficients)
InfPhysic$coefficients[,3]
which(max(InfPhysic$coefficients[,3]))
max(InfPhysic$coefficients[,3])
min(InfPhysic$coefficients[,3])
str(InfPhysic$coefficients)
InfPhysic$coefficients[,3]
hatvales(PhysicModel)
hatvale(PhysicModel)
Hatvalues(PhysicModel)
hatvalues(PhysicModel)
mxx(hatvalues(PhysicModel))
max(hatvalues(PhysicModel))
min(hatvalues(PhysicModel))
seq(as.Date(2014/01/01), as.Date(2014/12/31), by="day")
seq(as.Date(2014/1/1), as.Date(2014/12/31), by="day")
seq(as.Date("2014/1/1"), as.Date("2014/12/31"), by="day")
Year2014<-seq(as.Date("2014/1/1"), as.Date("2014/12/31"), by="day")
library(timeDate)
install.packages("timeData")
install.packages("timeDate")
help(zoo)
Year2014
?lubricate()
install.package("lubricate")
install.packages("lubricate")
?lubriacte()
?lubricate()
??lubricate()
sum(1:10)
sum(1:10) * 7
7*(1+2+3+4+5)
matrix(1:60,20,3,byrow=TRUE)
Y =c(10,5,7,4)
Y =matrix(Y,1)
Y
Y =c(10,5,7,4)
Y =matrix(Y,4)
Y
X=c(3,4,5,1,2,2,2,-1,1,-1,5,-5,5,0,0,1)
X<-matrix(X,4)
solve(X) %*% Y
X
?matrix()
X<-matrix(X,4, byrow=TRUE)
X
solve(X) %*% Y
Y
X
Y =matrix(Y,4,1)
Y
X=c(3,4,5,1,2,2,2,-1,1,-1,5,-5,5,0,0,1)
X <-matrix(c(3,2,1,5, 4,2,5,0,5,2,5,0, 1,-1,-5,1),4,4)
X
X <-matrix(c(3,2,1,5, 4,2,5,0,5,2,-1,0, 1,-1,-5,1),4,4)
X
X <-matrix(c(3,2,1,5, 4,2,-1,0,5,2,5,0, 1,-1,-5,1),4,4)
X
solve(X) %*% Y
solve(X,Y)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
cppFunction('int add(int x, int y, int z) {intsum=x+y+z;   return sum; }
)
cppFunction('int add(int x, int y, int z) {intsum=x+y+z;   return sum; }
)
cppFunction('int add(int x, int y, int z) {intsum=x+y+z;   return sum; }
cppFunction('int add(int x, int y, int z) {intsum=x+y+z;   return sum; }
cppFunction('int add(int x, int y, int z) {
int sum = x +y+ z;
return sum;
}
)
''
cppFunction('int add(int x, int y, int z) {
int sum = x +y+ z;
return sum;
}')
add
add(7+9+677)
add(7,9,677)
install.packages("shiny")
source('~/Documents/Data Science Hopkins/Data Product/My code/Week1Simple.R', echo=TRUE)
shiny::runApp('Documents/Data Science Hopkins/Data Product/My code')
shiny::runApp('Documents/Data Science Hopkins/Data Product/My code')
shiny::runApp('Documents/Data Science Hopkins/Data Product/My code')
shiny::runApp('Documents/Data Science Hopkins/Data Product/My code')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Week1 Code 2')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Week1 Code 2')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Week1 Code 2')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Week1 Code 2')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Week1 Code 2')
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
install.packages("googlevis")
install.packages("googleVis")
plot(gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400)))
suppressPackageStartupMessages(library(googleVis))
plot(gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400)))
?abline()
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myplot(20)
myPlot(20)
myPlot(10)
myPlot(0)
myPlot(5)
myPlot(20)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rcharts)
install.packages("rcharts")
library(rcharts)
require(devtools)
install_github('rCharts', 'ramnathv'
)
library(rcharts)       ## should be downloaded from github
library(rCharts)       ## should be downloaded from github
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp('Documents/Data Science Hopkins/Data Product/Quizzes/Week1/shiny')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Quizzes/Week1/shiny')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Quizzes/Week1/shiny')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Quizzes/Week1/shiny')
shiny::runApp('Documents/Data Science Hopkins/Data Product/Quizzes/Week1/shiny')
install.packages("survival")
data(hemorrhage)
install.packages("npsm")
data(hemorrhage)
library(npsm)
data(hemorrage)
help(npsm)
??npsm
data(hemorrhage)
with(hemorrhage,Surv(round(time,2),recur))
library(survival)
with(hemorrhage,Surv(round(time,2),recur))
fit<-with(hemorrhage, survfit(Surv(time,recur)~genotype))
plot(fit,lty=1:2,     + ylab=’Probability of Hemorrhage-Free Survival’,     + xlab=’Time (in Months)’     +)
plot(fit,lty=1:2,ylab=’Probability of Hemorrhage-Free Survival’, xlab=’Time (in Months)’)
plot(fit,lty=1:2,ylab="Probability of Hemorrhage-Free Survival", xlab="Time (in Months)")
install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='innovitnow',
token='3DF7886EB8FA244A81CD053003930311',
)
shinyapps::setAccountInfo(name='innovitnow', token='3DF7886EB8FA244A81CD053003930311', secret='YW+d+k/9zhUXhsQxQM7nl5RyugCaNxxSEbpzq7Lb')
library(ggplot2)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
library(Hmisc)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength, pch=20, col=unclass(cut2(training$Age)))
#
#  Question 3
#
hist(training$Superplasticizer, ylab="Frequency Super Plasticizer", xlab="Super Plasticizer", main="Question 3")
# Then log transform
hist(log(training$Superplasticizer),breaks = 5, ylab="Frequency Super Plasticizer", xlab="Super Plasticizer", main="Question 3")
hist(training$Superplasticizer, ylab="Frequency Super Plasticizer", xlab="Super Plasticizer", main="Question 3")
min(training$Superplasticizer)
which.min(training$Superplasticizer)
training$Superplasticizer[1:10]
log(training$Superplasticizer)
?transform()
nstall_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
tempdir()
?tempdir()
?transform()
install.packages("rgdal")
install.packages("caret")
install.packages("mboost")
source('~/.active-rstudio-document', echo=TRUE)
summary(firstcaretmodel)
str(firstcaretmodel)
firstcaretmodel$finalModel
glmboostparam <-expand.grid(mstop = c(100,200,300), prune=TRUE)
firstcaretmodel <-train(volume~winter+Solar_Rad+Temp+month+year+school_holiday,
data=trainingset,
method="glmboost",
tuneGrid =glmboostparam
)
summary(firstcaretmodel)
firstcaretprediction <-predict(firstcaretmodel, newdata = testset)
firstcaretRMSE <-RMSE(firstcaretprediction, testset$volume)
firstcaretRMSE
firstRMSE
str(firstcaretprediction)
str(firstcaretmodel)
str(firstcaretmodel$finalModel)
library(knitr)
results <-data.frame(RMSE=firstcaretmodel$RMSE, Rsquare =firstcaretmodel$Rsquare )
kable(head(results),format='markdown')
head(results)
firstcaretmodel$RMSE
firstcaretmodel$Response$RMSE
str(firstcaretmodel)
firstcaretmodel$Resample$RMSE
firstcaretmodel$Resample
str(firstcaretmodel)
firstcaretmodel$resample$RMS
results <-data.frame(RMSE=firstcaretmodel$resample$RMSE, Rsquare =firstcaretmodel$resampleSRsquare )
kable(head(results),format='markdown')
head(results)
firstcaretmodel$resample$RMSE
firstcaretmodel$resampleSRsquare
results <-data.frame(RMSE=firstcaretmodel$resample$RMSE, Rsquare =firstcaretmodel$resample$Rsquared)
kable(head(results),format='markdown')
kable(head(results,20),format='markdown')
str(firstcaretmodel$finalModel)
response(firstcaretmodel$finalModel)
family$response(firstcaretmodel$finalModel)
family::response(firstcaretmodel$finalModel)
class(firstcaretprediction$finalModel)
class(firstcaretprediction$finalModel)
class(firstcaretmodel$finalModel)
class(firstcaretmodel)
boostcontrol <- trainControl( method = "repeatedcv",
number = 10,
repeats = 3)
secondcaretmodel <-train(volume~winter+Solar_Rad+Temp+month+year+school_holiday,
data=trainingset,
method="glmboost",
tuneGrid =glmboostparam,
trControl = boostcontrol
)
secondcaretprediction <-predict(secondcaretmodel, newdata = testset)
secondcaretRMSE <-RMSE(secondcaretprediction, testset$volume)
secondcaretRMSE
firstcaretRMSE
firstRMSE
str(secondcaretmodel$finalModel)
var(secondcaretprediction -testset$volume)
var(firstcaretprediction -testset$volume)
var(firstpredict  -testset$volume)
secondcaretRMSE/mean(testset$volume)
firstRMSE/mean(testset$volume)
var(testset$volume -secondcaretprediction)
var(testset$volume -firstprediction)
var(testset$volume -firstpredict)
